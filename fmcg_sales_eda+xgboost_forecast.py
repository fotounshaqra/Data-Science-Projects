# -*- coding: utf-8 -*-
"""FMCG Sales EDA+XGBoost Forecast.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/15OhzDUrwf45XNA-QAhQ8Y0GfvmzpV2tp
"""

import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns
import numpy as np
import xgboost as xgb
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error
import os
from matplotlib import pyplot as plt
import seaborn as sns
import folium
from mlxtend.frequent_patterns import apriori
from mlxtend.preprocessing import TransactionEncoder

file_path = '/content/FMCG_2022_2024.csv'
data = pd.read_csv(file_path)

data.head()

data['date'] = pd.to_datetime(data['date'])

sales_by_date = data.groupby('date')['units_sold'].sum().reset_index()

plt.figure(figsize=(12, 6))
plt.plot(sales_by_date['date'], sales_by_date['units_sold'], label='Sales', color='maroon')
plt.title('Sales Trend Over Time')
plt.xlabel('date')
plt.ylabel('units_sold')
plt.grid(False)
plt.legend()
plt.xticks(rotation=45)
plt.tight_layout()
plt.show()

sales_by_category = data.groupby('category')['units_sold'].sum().reset_index()

plt.figure(figsize=(6, 4))
plt.pie(sales_by_category['units_sold'], labels=sales_by_category['category'], autopct='%1.1f%%', startangle=140)
plt.title('Distribution of Units Sold by Category')
plt.axis('equal')
plt.tight_layout()
plt.show()

def create_lagged_features(data, lag=1):
    lagged_data = data.copy()
    for i in range(1, lag+1):
        lagged_data[f'lag_{i}'] = lagged_data['units_sold'].shift(i)
    return lagged_data

lag = 5
sales_with_lags = create_lagged_features(data[['date', 'units_sold']], lag)

sales_with_lags = sales_with_lags.dropna()

X = sales_with_lags.drop(columns=['date', 'units_sold'])
y = sales_with_lags['units_sold']

X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, shuffle=False)

model_xgb = xgb.XGBRegressor(objective='reg:squarederror', n_estimators=100, learning_rate=0.1, max_depth=5)
model_xgb.fit(X_train, y_train)

predictions_xgb = model_xgb.predict(X_test)
rmse_xgb = np.sqrt(mean_squared_error(y_test, predictions_xgb))

print(f"RMSE: {rmse_xgb:.2f}")

plt.figure(figsize=(12, 6))
plt.plot(y_test.index, y_test, label='Actual Sales', color='purple')
plt.plot(y_test.index, predictions_xgb, label='Predicted Sales', color='navy')
plt.title('Sales Forecasting using XGBoost')
plt.xlabel('Date')
plt.ylabel('Sales')
plt.legend()
plt.grid(False)
plt.tight_layout()
plt.show()